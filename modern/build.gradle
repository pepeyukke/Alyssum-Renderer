import bs.ModLoader
import bs.SemverUtils
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import org.embeddedt.embeddium.gradle.DiscordNotifier
import org.embeddedt.embeddium.gradle.stonecutter.ModDependencyCollector
import xyz.wagyourtail.jvmdg.gradle.task.files.DowngradeFiles

import java.nio.file.Files
import java.nio.file.StandardCopyOption
import static bs.ModLoader.FABRIC
import static bs.ModLoader.FORGE
import static bs.ModLoader.NEOFORGE

plugins {
    id 'java'
    id 'embeddium-fabric-remapper' apply false
    id 'maven-publish'

    id "com.gradleup.shadow" version "8.3.0"
    id 'ru.vyarus.use-python' version '4.0.0'
    id "xyz.wagyourtail.jvmdowngrader" version "1.1.3"
}

group = "org.embeddedt"
version = rootProject.version

apply from: rootProject.file('buildSrc/maven_repo.gradle')

ModLoader configuredModLoader = ModLoader.fromProject(project)
archivesBaseName = "celeritas-$configuredModLoader.friendlyName-mc${ModLoader.getMinecraftVersion(project).replaceAll("^1\\.", "")}"

def packageJar = tasks.create("packageJar", Copy.class) {
    into("${rootProject.layout.buildDirectory.get()}/libs/${project.version}")
}

python {
    scope = VIRTUALENV
    envPath = "${project.rootDir}/.gradle/python"
    pip 'portablemc:4.4.0'
}

project.ext["loom.platform"] = configuredModLoader.friendlyName
project.ext["cur_mc_ver"] = ModLoader.getMinecraftVersion(project)

repositories {
    mavenCentral()
    // for Mod Menu
    maven {
        url = "https://maven.terraformersmc.com/releases"
    }
    // For NeoForge
    maven {
        url = "https://maven.neoforged.net/releases"
    }
    // For NeoForge PRs
    if (versionedProperty("neoforge_pr") != null) {
        maven {
            url "https://prmaven.neoforged.net/NeoForge/pr${versionedProperty("neoforge_pr")}"
            content {
                includeModule("net.neoforged", "neoforge")
            }
        }
    }
    // For Patchment mappings
    if (rootProject.properties.parchment_version) {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }
    // For Forge
    maven {
        url = "https://maven.minecraftforge.net/"
    }
    maven {
        url = "https://maven.fabricmc.net/"
    }
    maven {
        url = "https://maven.taumc.org/releases"
    }
    // For CurseForge
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        url = "https://maven.su5ed.dev/releases"
    }
    maven {
        name 'Maven for PR #14' // https://github.com/neoforged/AccessTransformers/pull/14
        url 'https://prmaven.neoforged.net/AccessTransformers/pr14'
        content {
            includeModule('net.neoforged.accesstransformers', 'at-modlauncher')
            includeModule('net.neoforged.accesstransformers', 'at-cli')
            includeModule('net.neoforged', 'accesstransformers')
            includeModule('net.neoforged.accesstransformers', 'at-parser')
        }
    }
    mavenLocal()
}
apply plugin: 'xyz.wagyourtail.unimined'
apply plugin: 'embeddium-fabric-remapper'

ext.mc_version_prop_suffix = ext.cur_mc_ver.toString().replace('.', '_')

def versionedProperty(String name) {
    return rootProject.properties[name + "_" + ModLoader.getMinecraftVersion(project).replace('.', '_')]
}

java {
    withSourcesJar()
    def java = stonecutter.eval(ModLoader.getMinecraftVersion(project), ">=1.20.5") ? JavaVersion.VERSION_21 : JavaVersion.VERSION_17
    targetCompatibility = java
    sourceCompatibility = java
}

def skippedFabricApiModules = ["fabric-renderer-api-v1", "fabric-renderer-indigo"]

def shadersEnabled = project.name.startsWith("1.20.1-") || project.name.startsWith("1.20.4-") || project.name.startsWith("1.20.6-") || project.name.startsWith("1.21.1-") || project.name.startsWith("1.21.2-")
def batchingEnabled = shadersEnabled

configurations {
    modCompileOnly
    compileClasspath.extendsFrom(modCompileOnly)
    modApi
    compileClasspath.extendsFrom(modApi)
    runtimeClasspath.extendsFrom(modApi)
    modLocalRuntime
    runtimeClasspath.extendsFrom(modLocalRuntime)
}

sourceSets {
    mcp
    main {
        compileClasspath += sourceSets.mcp.output
        if (shadersEnabled) {
            java {
                srcDirs += "src/main/shaders_java"
            }
            resources {
                srcDirs += "src/main/shaders_resources"
            }
        }
        if (batchingEnabled) {
            java {
                srcDirs += "src/main/batching_java"
            }
            resources {
                srcDirs += "src/main/batching_resources"
            }
        }
    }
}

def modMixinConfigs = ["embeddium.mixins.json"]

if (batchingEnabled) {
    modMixinConfigs.add("oculus-batched-entity-rendering.mixins.json")
}

if (shadersEnabled) {
    modMixinConfigs.addAll([
            "mixins.oculus.json",
            "mixins.oculus.compat.sodium.json",
            "mixins.oculus.compat.indigo.json",
            "mixins.oculus.compat.indium.json",
            "mixins.oculus.compat.dh.json",
            "mixins.oculus.compat.pixelmon.json"
    ])
}

evaluationDependsOn(":common")
evaluationDependsOn(":common-shaders")

unimined.minecraft {
    combineWith(project(":common"), project(":common").sourceSets.getByName("main"))
    combineWith(project(":common-shaders"), project(":common-shaders").sourceSets.getByName("main"))

    version ModLoader.getMinecraftVersion(project)

    mappings {
        if(configuredModLoader == FABRIC) {
            intermediary()
            devFallbackNamespace "intermediary"
        }
        if(configuredModLoader == FORGE) {
            searge()
            devFallbackNamespace "searge"
        }
        if(configuredModLoader == NEOFORGE) {
            devFallbackNamespace "official"
        }
        mojmap()
        if (versionedProperty("parchment_version") != null) {
            def parchmentData = versionedProperty("parchment_version").split(":")
            parchment(parchmentData[0], parchmentData[1])
        }

        if (stonecutter.eval(ModLoader.getMinecraftVersion(project), "<=1.14.4")) {
            stub.withMappings("intermediary", ["mojmap"]) {
                c("net/minecraft/class_638", ["net/minecraft/client/multiplayer/ClientLevel"])
                c("net/minecraft/class_1920", ["net/minecraft/world/level/BlockAndTintGetter"])
            }
        }

    }

    mods {
        remap(configurations.modCompileOnly)
        remap(configurations.modApi)
    }

    def embeddiumAccessWidener = rootProject.file("modern/src/main/resources/embeddium.accesswidener")

    if (configuredModLoader == FABRIC) {
        fabric {
            loader rootProject.properties.fabricloader

            accessWidener embeddiumAccessWidener
        }
    } else if (configuredModLoader == FORGE) {
        minecraftForge {
            loader versionedProperty("forge").split("-")[1]
            mixinConfig modMixinConfigs
            project.getLayout().getProjectDirectory().dir("src/main/resources/META-INF").getAsFile().mkdirs()
            accessTransformer aw2at(embeddiumAccessWidener)
        }
    } else if (configuredModLoader == NEOFORGE) {
        neoForged {
            loader "net.neoforged:neoforge:${versionedProperty("neoforge")}:universal"
            mixinConfig modMixinConfigs
            project.getLayout().getProjectDirectory().dir("src/main/resources/META-INF").getAsFile().mkdirs()
            accessTransformer aw2at(embeddiumAccessWidener)
     }
        minecraftRemapper.config {
            ignoreConflicts(true)
        }
    }

    if(stonecutter.eval(ModLoader.getMinecraftVersion(project), "<1.18")) {
        def downgradeClient = tasks.register("downgradeClient", DowngradeFiles) {
            inputCollection = sourceSet.output.classesDirs + sourceSet.runtimeClasspath
            classpath = project.files()
            outputCollection.files
        }

        runs.config("client") {
            classpath = downgradeClient.get().outputCollection + files(jvmdg.getDowngradedApi(JavaVersion.VERSION_1_8))
            var downgradedSrc = project.getLayout().getBuildDirectory().dir("tmp/downgradeClient/main").get().asFile.toString()
            environment["MOD_CLASSES"] = "embeddium%%${downgradedSrc}:embeddium%%${downgradedSrc}"
        }
    }

    runs.config('server') {
        enabled = false
    }

}

tasks.named("runClient") {
    workingDir = project.getLayout().getProjectDirectory().dir("run").asFile
}

dependencies {
    compileOnly("org.projectlombok:lombok:1.18.30")
    compileOnly('com.google.code.findbugs:jsr305:3.0.2')
    annotationProcessor("org.projectlombok:lombok:1.18.30")

    shadow(project(":common"))
    shadow(project(":common-shaders")) {
        transitive = false
    }

    if (shadersEnabled) {
        modCompileOnly("maven.modrinth:distanthorizonsapi:3.0.0")

        def glslTransformLib = "org.taumc:glsl-transformation-lib:${glsl_transformation_lib_version}:fat"
        def jcpp = "org.anarres:jcpp:1.4.14"
        def shaderDeps = [glslTransformLib, jcpp]

        shaderDeps.forEach {
            implementation(it)
            shadow(it) {
                transitive = false
            }
            minecraftLibraries(it)
        }
    }

    if (stonecutter.eval(ModLoader.getMinecraftVersion(project), "<1.19.3")) {
        def jomlDep = "org.joml:joml:1.10.5"
        implementation(jomlDep)
        if(configuredModLoader == FORGE || configuredModLoader == NEOFORGE) {
            if(stonecutter.eval(ModLoader.getMinecraftVersion(project), ">=1.17")) {
                // Forge only supports JiJ on new enough versions
                include(jomlDep)
                minecraftLibraries(jomlDep)
            } else {
                shadow(jomlDep)
            }
        } else {
            // Fabric always supports JiJ
            include(jomlDep)
        }
    }

    def fabric_api_version
    if (configuredModLoader == FABRIC) {
        fabric_api_version = versionedProperty("fabric_api_version")
    } else if (configuredModLoader == NEOFORGE || (configuredModLoader == FORGE && stonecutter.eval(ModLoader.getMinecraftVersion(project), "<1.20.2"))) {
        fabric_api_version = versionedProperty("ffapi")
    } else {
        fabric_api_version = null
    }

    if(fabric_api_version != null) {

        for (String module in rootProject.properties.fabric_api_modules.split(",") as String[]) {
            try {
                if(configuredModLoader == FABRIC && !skippedFabricApiModules.contains(module)) {
                    def moduleDep = fabricApiModuleFinder.module(configuredModLoader, module, fabric_api_version)
                    modApi(moduleDep) {
                        exclude group: 'net.fabricmc', module: 'fabric-loader'
                    }
                    include(moduleDep) {
                        exclude group: 'net.fabricmc', module: 'fabric-loader'
                    }
                } else {
                    modCompileOnly fabricApiModuleFinder.module(configuredModLoader, module, fabric_api_version), {
                        exclude group: 'net.fabricmc', module: 'fabric-loader'
                    }
                }
            } catch(Exception ignored) {
                println("Skipped module " + module + " on " + ModLoader.getMinecraftVersion(project) + "/" + configuredModLoader.friendlyName)
            }
        }
    }

    if (configuredModLoader == FABRIC) {
        modCompileOnly "com.terraformersmc:modmenu:$project.properties.modmenu", {
            transitive = false
        }
        // LazyDFU for older versions
        if (stonecutter.eval(ModLoader.getMinecraftVersion(project), "<1.19.4")) {
            if(stonecutter.eval(ModLoader.getMinecraftVersion(project), ">=1.19")) {
                modLocalRuntime "curse.maven:lazydfu-433518:3821870"
            } else {
                modLocalRuntime "curse.maven:lazydfu-433518:3209972"
            }
        }
    } else {
        // Forge-like
        if (configuredModLoader == FORGE) {
            if (rootProject.properties.mixinextras) {
                compileOnly("io.github.llamalad7:mixinextras-common:$rootProject.properties.mixinextras")

                if(stonecutter.eval(ModLoader.getMinecraftVersion(project), ">=1.17")) {
                    implementation(include("io.github.llamalad7:mixinextras-$configuredModLoader.friendlyName:$rootProject.properties.mixinextras"))
                } else {
                    implementation("io.github.llamalad7:mixinextras-common:$rootProject.properties.mixinextras")
                    shadow("io.github.llamalad7:mixinextras-common:$rootProject.properties.mixinextras")
                }
            }
        }

        compileOnly "net.fabricmc:fabric-loader:$rootProject.properties.fabricloader"
    }

    // Mod compat dependencies
    ModDependencyCollector.addModDependencies(project)
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    def dep = versionedProperty("minecraft_dependency")
    if (dep == null) {
        dep = stonecutter.current.version
    }
    if (configuredModLoader == FORGE || configuredModLoader == NEOFORGE) {
        dep = SemverUtils.convertSemverPredicateToMavenPredicate(dep)
    }

    inputs.property "forgeid", configuredModLoader == NEOFORGE ? "neoforge" : "forge"
    inputs.property "minecraft_dependency", dep
    inputs.property "mod_version", version
    inputs.property "mod_id", rootProject.properties.mod_id
    inputs.property "mod_display_name", rootProject.properties.mod_display_name
    inputs.property "mod_description", rootProject.properties.mod_description
    inputs.property "homepage_url", rootProject.properties.homepage_url
    inputs.property "sources_url", rootProject.properties.sources_url
    inputs.property "issue_tracker_url", rootProject.properties.issue_tracker_url
    inputs.property "license", rootProject.properties.license
    inputs.property "fabricloader", rootProject.properties.fabricloader
    inputs.property "contributors", rootProject.properties.mod_contributors.toString()
    inputs.property "authors", rootProject.properties.mod_authors.toString()
    inputs.property "fabric_api_modules", rootProject.properties.fabric_api_modules

    filesMatching(["fabric.mod.json", "META-INF/mods.toml", "quilt.mod.json", "embeddium.mixins.json"]) {
        def mixinCompatLevel
        if (stonecutter.eval(ModLoader.getMinecraftVersion(project), "<1.17")) {
            mixinCompatLevel = "JAVA_8"
        } else if (stonecutter.eval(ModLoader.getMinecraftVersion(project), "<1.18")) {
            mixinCompatLevel = "JAVA_16"
        } else {
            mixinCompatLevel = "JAVA_17"
        }
        def map = [
                "forgeid": configuredModLoader == NEOFORGE ? "neoforge" : "forge",
                "minecraft": dep,
                "mod_version": version,
                "mod_id": rootProject.properties.mod_id,
                "mod_display_name": rootProject.properties.mod_display_name,
                "mod_description": rootProject.properties.mod_description,
                "homepage_url": rootProject.properties.homepage_url,
                "sources_url": rootProject.properties.sources_url,
                "issue_tracker_url": rootProject.properties.issue_tracker_url,
                "license": rootProject.properties.license,
                "fabricloader": rootProject.properties.fabricloader,
                "mixinCompatLevel": mixinCompatLevel,
                "contributors": rootProject.properties.mod_contributors.toString().split(","),
                "authors": rootProject.properties.mod_authors.toString().split(",")
        ]
        expand map
    }
    doLast {
        if (configuredModLoader == NEOFORGE) {
            fileTree(dir: outputs.files.asPath, include: "META-INF/mods.toml").each { File file ->
                file.text += "\n\n[[mixins]]\nconfig = \"${rootProject.properties.mod_id}.mixins.json\""
            }
            if (stonecutter.eval(ModLoader.getMinecraftVersion(project), ">=1.20.5")) {
                fileTree(dir: outputs.files.asPath, include: "META-INF/mods.toml").each { File file ->
                    Files.copy(file.toPath(), java.nio.file.Path.of(outputs.files.asPath).resolve("META-INF/neoforge.mods.toml"), StandardCopyOption.REPLACE_EXISTING)
                    file.delete()
                }
            }
        }
        if (configuredModLoader == FABRIC) {
            fileTree(dir: outputs.files.asPath, include: "fabric.mod.json").each { File file ->
                def parse = new JsonSlurper().parse(file)
                def fModulesString = rootProject.properties.fabric_api_modules
                if (fModulesString == "*") {
                    parse.depends["fabric-api"] = ">=" + versionedProperty("fabric_api_version")
                } else {
                    def fModules = fModulesString.split(",")
                    for (String s in fModules) {
                        if(skippedFabricApiModules.contains(s)) {
                            continue
                        }
                        try {
                            // ^ means until the next major
                            parse.depends[s] = "^" + fabricApiModuleFinder.module(s, versionedProperty("fabric_api_version")).getVersion()
                        } catch(Exception ignored) {}
                    }
                }
                parse.mixins = modMixinConfigs
                file.text = JsonOutput.prettyPrint(JsonOutput.toJson(parse))
            }
        }
    }

    if (configuredModLoader == FORGE || configuredModLoader == NEOFORGE) {
        exclude 'fabric.mod.json'
    } else if (configuredModLoader == FABRIC) {
        exclude 'META-INF/mods.toml', 'META-INF/accesstransformer.cfg', 'pack.mcmeta'
    }
}

if(stonecutter.eval(ModLoader.getMinecraftVersion(project), ">=1.17") && stonecutter.eval(ModLoader.getMinecraftVersion(project), "<1.20.5")) {
    jvmdg.downgradeTo = JavaVersion.VERSION_16
} else if(stonecutter.eval(ModLoader.getMinecraftVersion(project), "<1.17")) {
    jvmdg.downgradeTo = JavaVersion.VERSION_1_8
} else {
    jvmdg.downgradeTo = JavaVersion.VERSION_21
}

tasks.named("remapJar") {
    mixinRemap {
        enableBaseMixin()
        enableMixinExtra()
        disableRefmap() // like fabric-loom 1.6
    }

    archiveClassifier = 'remapped-thin'
}

if (configuredModLoader == FABRIC || configuredModLoader == FORGE) {
    tasks.named("jar", Jar) {
        manifest {
            attributes([
                "Fabric-Loom-Mixin-Remap-Type": "static",
                "Fabric-Mapping-Namespace": "intermediary"
            ])
        }
    }
}

tasks.named("shadowJar", ShadowJar) {
    configurations = []
}

def shadowRemapJar = tasks.register("shadowRemapJar", ShadowJar) {
    archiveClassifier = "pre-downgrade"
    configurations = [project.configurations.shadow]
    from(tasks.named("remapJar"))
    manifest.inheritFrom(tasks.named("jar").get().manifest)
    if (configuredModLoader == FORGE && stonecutter.eval(ModLoader.getMinecraftVersion(project), "<1.17")) {
        relocate("com.llamalad7.mixinextras", "org.embeddedt.embeddium.impl.shadow.mixinextras")
        relocate("org.joml", "org.embeddedt.embeddium.impl.shadow.joml")
    }
    mergeServiceFiles()

    from("COPYING", "COPYING.LESSER", "README.md")
}


def customDowngrade = tasks.register('downgradeShadowRemapJar', xyz.wagyourtail.jvmdg.gradle.task.DowngradeJar) {
    inputFile = shadowRemapJar.get().archiveFile
    archiveClassifier = "post-downgrade"
}

tasks.register('shadeDowngradedShadowRemapJar', xyz.wagyourtail.jvmdg.gradle.task.ShadeJar) {
    inputFile = customDowngrade.get().archiveFile
    archiveClassifier = ""
}

afterEvaluate {
    if(configuredModLoader == FORGE && stonecutter.eval(ModLoader.getMinecraftVersion(project), "<1.17")) {
        tasks.named("preRunClient") {
            dependsOn("downgradeClient")
        }
    }
}

if (stonecutter.current.isActive()) {
    tasks.register("publishPackagesToDiscord") {
        outputs.upToDateWhen { false }
        doLast {
            DiscordNotifier.publishEmbeddiumJar(project)
        }
    }
}

def launchVersion
if (configuredModLoader == FABRIC) {
    launchVersion = fabricloader
} else if (configuredModLoader == FORGE) {
    launchVersion = versionedProperty("forge")
} else if (configuredModLoader == NEOFORGE) {
    launchVersion = versionedProperty("neoforge")
}

def launchDirectory = "${project.layout.buildDirectory.get()}/testProduction"

def copyJarForProductionTest = tasks.register("copyJarForProductionTest", Copy) {
    into("${launchDirectory}/mods")
    rename { String fileName -> "embeddium.jar" }
    dependsOn(tasks.named("shadeDowngradedShadowRemapJar"))
    from(tasks.named("shadeDowngradedShadowRemapJar").get().archiveFile)
}

tasks.register('testProductionJar', PythonTask) {
    dependsOn(copyJarForProductionTest)
    outputs.dir(rootProject.getLayout().getProjectDirectory().dir(".gradle/minecraft_prod"))
    outputs.upToDateWhen { false }
    command = "${project.rootDir}/scripts/test_mod_in_prod.py ${launchDirectory} ${ModLoader.getMinecraftVersion(project)} ${configuredModLoader.friendlyName}  ${launchVersion}"
}

publishing {
    tasks.publish {
        dependsOn(tasks.build)
    }
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = archivesBaseName
            artifact(tasks.named("shadeDowngradedShadowRemapJar"))
            artifact(tasks.named("sourcesJar"))
        }
    }
}


afterEvaluate {
    packageJar.dependsOn(tasks.named("shadeDowngradedShadowRemapJar"))
    packageJar.from(tasks.named("shadeDowngradedShadowRemapJar").get().archiveFile)
    build.finalizedBy(packageJar)
}
